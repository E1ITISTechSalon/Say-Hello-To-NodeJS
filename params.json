{"name":"Say-hello-to-nodejs","tagline":"Brief introductions about NodeJS","body":"This document is going to give you a brief introduction to NodeJS web development by creating a simple blog and tell you how to deploy the blog on [Appfog][1]. \r\n\r\n\r\n## Installation\r\n\r\nFirst things first, you should download [NodeJS][2] for your platform and install it.\r\n\r\nWhen you install NodeJS on your OS, you will also get the [NPM][3] tool at the same time. We will use NPM tool to install all the modules that our blog system depend upon.\r\n\r\n\r\n## Dependencies\r\n\r\n#### - [MongoDB][4]\r\nWe use MongoDB to store our data. You can get it [here][5]. \r\n\r\n#### - [ExpressJS][6]\r\nWe use ExpressJS as our web framework. You can install it by inputting below command:\r\n```Batchfile\r\n$ npm install -g express\r\n``` \r\n\r\n#### - [EJS][7]\r\nWe use EJS as our template engine. We will install it later when we create the blog project.\r\n\r\n\r\n## Start with generated skeleton\r\n\r\nFirst, we use `express` to generate a skeleton web application.\r\n```Batchfile\r\n$ express -e JBlog\r\n\r\n   create : JBlog\r\n   create : JBlog/package.json\r\n   create : JBlog/app.js\r\n   create : JBlog/public\r\n   create : JBlog/public/javascripts\r\n   create : JBlog/public/images\r\n   create : JBlog/public/stylesheets\r\n   create : JBlog/public/stylesheets/style.css\r\n   create : JBlog/routes\r\n   create : JBlog/routes/index.js\r\n   create : JBlog/routes/user.js\r\n   create : JBlog/views\r\n   create : JBlog/views/index.ejs\r\n\r\n   install dependencies:\r\n     $ cd JBlog && npm install\r\n\r\n   run the app:\r\n     $ node app\r\n```\r\n> *We add option `-e` in the command so that the express will use `EJS` as our default template engine.*\r\n\r\nAs express says, we can use below command to install dependencies and run it:\r\n```Batchfile\r\n# this command will install the dependencies in package.json\r\n$ cd JBlog && npm install  \r\n\r\n# this command will run the application\r\n$ node app\r\n```\r\n\r\n\r\n## Routes\r\n\r\nWe will use the generated `routes` folder as our controller holder place.\r\n\r\nAdd below codes above `app.get('/', routes.index);` in `app.js` file and delete below lines in `app.js` file.\r\n\r\n----------\r\n**introduce the order maters under express.**\r\n\r\n----------\r\n\r\n```javascript\r\nvar user = require('./routes/user');  // delete\r\n...\r\nroutes(app);  // add\r\napp.get('/', routes.index);  // delete\r\napp.get('/users', user.list);  // delete\r\n```\r\n\r\nDelete `user.js` file in `routes` folder and use below codes to replace the content in `index.js` file.\r\n\r\n----------\r\n**introduce require path things**\r\n\r\n**export things**\r\n\r\n----------\r\n\r\n```javascript\r\nvar post = require('./post');\r\nvar admin = require('./admin');\r\n\r\nmodule.exports = function(app) {\r\n    // home page\r\n    app.get('/', post.home);\r\n\r\n    // single blog page\r\n    app.get('/blog/:id', post.post);\r\n\r\n    // login page\r\n    app.get('/admin/login', admin.login);\r\n    app.post('/admin/login', admin.login);\r\n\r\n    // blog adding page\r\n    app.get('/admin/add', admin.add);\r\n    app.post('/admin/add', admin.add);\r\n\r\n    // blog editting page\r\n    app.get('/admin/edit/:id', admin.add);\r\n    app.post('/admin/edit/:id', admin.add);\r\n\r\n    // blog deleting page\r\n    app.get('/admin/delete/:id', admin.add);\r\n    app.post('/admin/delete/:id', admin.add);\r\n}\r\n```\r\n\r\nThen we add `post.js` file and `admin.js` file under `routes` folder and use below codes to fill them:\r\n```javascript\r\n// post.js\r\nexports.home = function(req, res) {\r\n    res.send('home page');\r\n}\r\n\r\nexports.post = function(req, res) {\r\n    res.send('single blog page');\r\n}\r\n```\r\n```javascript\r\n// admin.js\r\nexports.login = function(req, res) {\r\n    res.send('login page');\r\n}\r\n\r\nexports.add = function(req, res) {\r\n    res.send('add page');\r\n}\r\n\r\nexports.edit = function(req, res) {\r\n    res.send('edit page');\r\n}\r\n\r\nexports.delete = function(req, res) {\r\n    res.send('delete page');\r\n}\r\n```\r\n\r\n\r\n## Models\r\n\r\nWe use mongodb as storage, so we need to install the driver first. Add mongodb middleware in `package.json` file.\r\n```json\r\n{\r\n  \"name\": \"JBlog\",\r\n  \"version\": \"0.0.1\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"node app.js\"\r\n  },\r\n  \"dependencies\": {\r\n    \"express\": \"3.3.5\",\r\n    \"ejs\": \"*\",\r\n    \"mongodb\": \"*\" // add this line\r\n  }\r\n}\r\n```\r\n\r\nAnd then install it:\r\n```Batchfile\r\n$ npm install --save\r\n```\r\n\r\nCreate a new folder named `models` under our project.\r\n\r\nThen save below codes as `db.js` and put it under `models` folder.\r\n```javascript\r\nvar mongodb = require('mongodb');\r\n\r\nvar Db = mongodb.Db,\r\n    Connection = mongodb.Connection,\r\n    Server = mongodb.Server;\r\n\r\nvar db_name = 'blog',\r\n    db_host = 'localhost';\r\n\r\nmodule.exports = new Db(db_name, new Server(db_host, Connection.DEFAULT_PORT, {}));\r\n```\r\n\r\nNow we can use `db.js` to access mongodb.\r\n\r\nIt's time to create our `user` model. Create a `user.js` and put it under `models` folder. After that, fill it with below code.\r\n``` javascript\r\n\r\n```\r\n\r\n\r\n\r\n  [1]: https://www.appfog.com/\r\n  [2]: http://nodejs.org/download/\r\n  [3]: https://npmjs.org/\r\n  [4]: http://www.mongodb.org/\r\n  [5]: http://www.mongodb.org/downloads\r\n  [6]: http://expressjs.com/\r\n  [7]: http://www.embeddedjs.com/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}